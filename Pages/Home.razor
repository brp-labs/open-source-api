@page "/"

@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components

@inject HttpClient Http

<PageTitle>OSF API</PageTitle>

<h2 class="header">Open Science Framework: Scientific Articles and Research Papers</h2>

<div class="mb-3">
	<input @bind="keyword" placeholder="Indtast søgeord" maxlength="100" />

	@* <input @bind="itemsPerPage" type="number" min="1" max="25" placeholder="Items per page" /> *@
	@* <input @bind="page" type="number" min="1" max="1000" placeholder="Page number" /> *@

	<button class="btn btn-secondary ms-3" @onclick="Ryd">Fjern søgeord</button>

	<button class="btn btn-danger ms-3 me-2" @onclick="Reset">Søg forfra</button>

	<button class="btn btn-success ms-2 me-2" @onclick="Search">Indlæs næste side</button>

	<span class="ms-2">Side: @currentPage</span>

	<span class="ms-3 p-2 bg-dark-subtle fs-6">Der kan kun søges på ét søgeord eller en sammenhængende streng. Klik 
		på en kolonneoverskrift for at sortere.</span>

	@if (isLoading)
	{
		<div class="spinner-border text-danger ms-4" style="margin-bottom:-10px;" role="status"> <span class="visually-hidden">Loading...</span> </div>
	}
</div>

<QuickGrid Items="@(nodes.AsQueryable())" TItem="Node" Theme="corporate">
	<PropertyColumn Property="@(n => n.Title)" Sortable="true" />
	<PropertyColumn Property="@(n => n.Url)" Sortable="true" />
	<PropertyColumn Property="@(n => n.DateCreated)" Format="yyyy-MM-dd" Sortable="true" Title="Date created"/>
</QuickGrid>


<div class="footer">
	This webservice is created by Brian Ravn Pedersen &#128522;
</div>


@code {
	record Node(string Title, string Url, DateTime DateCreated);

	List<Node> nodes = new List<Node>();
	private string keyword = string.Empty;
	private int itemsPerPage = 25;
	private int page = 0;
	private int currentPage = 1;
	private ApiResponse? response;
	private bool isLoading = false;

	protected override async Task OnInitializedAsync()
	{
		await Search();
	}

	private async Task Search()
	{
		isLoading = true;
		page++;
		nodes.Clear();
		try
		{
			var url = $"https://kirkegang.net/opensource/opensource_proxy.php?keyword={Uri.EscapeDataString(keyword)}&items_per_page={itemsPerPage}&page={page}";
			response = await Http.GetFromJsonAsync<ApiResponse>(url);
			Console.WriteLine(response); // Log responsen til konsollen
			nodes = response.Data.Select(n => new Node(n.Attributes.title, n.Links.html, n.Attributes.date_created)).ToList();
			Console.WriteLine($"Nodes count after API call: {nodes.Count}"); // Log nodes count
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error: {ex.Message}");
		}
		finally {
			if (nodes.Count == 0) {
				nodes.Add(new Node($"Ingen poster fundet med søgeordet: {keyword}", "", DateTime.MinValue));
				page = 0;
			}
			currentPage = page;
			isLoading = false;
		}
	}

	public class ApiResponse
	{
		public List<NodeData> Data { get; set; }
	}

	public class NodeData
	{
		public NodeAttributes Attributes { get; set; }
		public NodeLinks Links { get; set; }
	}

	public class NodeAttributes
	{
		public string title { get; set; }

		public DateTime date_created { get; set; }
	}

	public class NodeLinks
	{
		public string html { get; set; }
	}

	private async Task Reset(MouseEventArgs e)
	{
		// keyword = string.Empty;
		// itemsPerPage = 25;
		page = 0;
		currentPage = 0;
		await Search();
	}
	private void Ryd(MouseEventArgs e)
	{
		keyword = "";
	}
}
